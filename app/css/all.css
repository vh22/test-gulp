/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
* {
  color: blue; }

.class {
  padding: 10px; }
  .class:before, .class:after {
    content: " ";
    display: table; }
  .class:after {
    clear: both; }

.base, .foo {
  color: red; }

.bar {
  padding: 12px; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zcHJpdGUtaWNvLWZpcnN0LnNjc3MiLCJhbGwuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0VBWUU7QUFrQ0Y7Ozs7RUFJRTtBQUtGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBeUJFO0FBMkJGOzs7Ozs7Ozs7OztFQVdFO0FBbUJGOzs7OztFQUtFO0FBVUY7Ozs7O0VBS0U7QUM1SkY7RUFDRSxZQUFZLEVBQ2I7O0FBYUQ7RUFDRSxjQUFjLEVBRWY7RUFIRDtJQVRJLGFBQWE7SUFDYixlQUFlLEVBQ2hCO0VBT0g7SUFKSSxZQUFZLEVBQ2I7O0FBUUg7RUFDRSxXQUFXLEVBQ1o7O0FBYUQ7RUFQRSxjQUNELEVBQUMiLCJmaWxlIjoiYWxsLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5TQ1NTIHZhcmlhYmxlcyBhcmUgaW5mb3JtYXRpb24gYWJvdXQgaWNvbidzIGNvbXBpbGVkIHN0YXRlLCBzdG9yZWQgdW5kZXIgaXRzIG9yaWdpbmFsIGZpbGUgbmFtZVxuXG4uaWNvbi1ob21lIHtcbiAgd2lkdGg6ICRpY29uLWhvbWUtd2lkdGg7XG59XG5cblRoZSBsYXJnZSBhcnJheS1saWtlIHZhcmlhYmxlcyBjb250YWluIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBpY29uXG4kaWNvbi1ob21lOiB4IHkgb2Zmc2V0X3ggb2Zmc2V0X3kgd2lkdGggaGVpZ2h0IHRvdGFsX3dpZHRoIHRvdGFsX2hlaWdodCBpbWFnZV9wYXRoO1xuXG5BdCB0aGUgYm90dG9tIG9mIHRoaXMgc2VjdGlvbiwgd2UgcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ByaXRlc2hlZXQgaXRzZWxmXG4kc3ByaXRlc2hlZXQ6IHdpZHRoIGhlaWdodCBpbWFnZSAkc3ByaXRlc2hlZXQtc3ByaXRlcztcbiovXG4kYmFjay1uYW1lOiAnYmFjayc7XG4kYmFjay14OiAwcHg7XG4kYmFjay15OiAwcHg7XG4kYmFjay1vZmZzZXQteDogMHB4O1xuJGJhY2stb2Zmc2V0LXk6IDBweDtcbiRiYWNrLXdpZHRoOiAxOXB4O1xuJGJhY2staGVpZ2h0OiAxNXB4O1xuJGJhY2stdG90YWwtd2lkdGg6IDE5cHg7XG4kYmFjay10b3RhbC1oZWlnaHQ6IDE1cHg7XG4kYmFjay1pbWFnZTogJ3Nwcml0ZS1pY28tZmlyc3QucG5nJztcbiRiYWNrOiAoMHB4LCAwcHgsIDBweCwgMHB4LCAxOXB4LCAxNXB4LCAxOXB4LCAxNXB4LCAnc3ByaXRlLWljby1maXJzdC5wbmcnLCAnYmFjaycsICk7XG4kYmFjay0yeC1uYW1lOiAnYmFja0AyeCc7XG4kYmFjay0yeC14OiAwcHg7XG4kYmFjay0yeC15OiAwcHg7XG4kYmFjay0yeC1vZmZzZXQteDogMHB4O1xuJGJhY2stMngtb2Zmc2V0LXk6IDBweDtcbiRiYWNrLTJ4LXdpZHRoOiAzOHB4O1xuJGJhY2stMngtaGVpZ2h0OiAzMHB4O1xuJGJhY2stMngtdG90YWwtd2lkdGg6IDM4cHg7XG4kYmFjay0yeC10b3RhbC1oZWlnaHQ6IDMwcHg7XG4kYmFjay0yeC1pbWFnZTogJ3Nwcml0ZS1pY28tZmlyc3RAMngucG5nJztcbiRiYWNrLTJ4OiAoMHB4LCAwcHgsIDBweCwgMHB4LCAzOHB4LCAzMHB4LCAzOHB4LCAzMHB4LCAnc3ByaXRlLWljby1maXJzdEAyeC5wbmcnLCAnYmFja0AyeCcsICk7XG4kc3ByaXRlc2hlZXQtd2lkdGg6IDE5cHg7XG4kc3ByaXRlc2hlZXQtaGVpZ2h0OiAxNXB4O1xuJHNwcml0ZXNoZWV0LWltYWdlOiAnc3ByaXRlLWljby1maXJzdC5wbmcnO1xuJHNwcml0ZXNoZWV0LXNwcml0ZXM6ICgkYmFjaywgKTtcbiRzcHJpdGVzaGVldDogKDE5cHgsIDE1cHgsICdzcHJpdGUtaWNvLWZpcnN0LnBuZycsICRzcHJpdGVzaGVldC1zcHJpdGVzLCApO1xuJHJldGluYS1zcHJpdGVzaGVldC13aWR0aDogMzhweDtcbiRyZXRpbmEtc3ByaXRlc2hlZXQtaGVpZ2h0OiAzMHB4O1xuJHJldGluYS1zcHJpdGVzaGVldC1pbWFnZTogJ3Nwcml0ZS1pY28tZmlyc3RAMngucG5nJztcbiRyZXRpbmEtc3ByaXRlc2hlZXQtc3ByaXRlczogKCRiYWNrLTJ4LCApO1xuJHJldGluYS1zcHJpdGVzaGVldDogKDM4cHgsIDMwcHgsICdzcHJpdGUtaWNvLWZpcnN0QDJ4LnBuZycsICRyZXRpbmEtc3ByaXRlc2hlZXQtc3ByaXRlcywgKTtcblxuLypcblRoZXNlIFwicmV0aW5hIGdyb3VwXCIgdmFyaWFibGVzIGFyZSBtYXBwaW5ncyBmb3IgdGhlIG5hbWluZyBhbmQgcGFpcmluZyBvZiBub3JtYWwgYW5kIHJldGluYSBzcHJpdGVzLlxuXG5UaGUgbGlzdCBmb3JtYXR0ZWQgdmFyaWFibGVzIGFyZSBpbnRlbmRlZCBmb3IgbWl4aW5zIGxpa2UgYHJldGluYS1zcHJpdGVgIGFuZCBgcmV0aW5hLXNwcml0ZXNgLlxuKi9cbiRiYWNrLWdyb3VwLW5hbWU6ICdiYWNrJztcbiRiYWNrLWdyb3VwOiAoJ2JhY2snLCAkYmFjaywgJGJhY2stMngsICk7XG4kcmV0aW5hLWdyb3VwczogKCRiYWNrLWdyb3VwLCApO1xuXG4vKlxuVGhlIHByb3ZpZGVkIG1peGlucyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBhcnJheS1saWtlIHZhcmlhYmxlc1xuXG4uaWNvbi1ob21lIHtcbiAgQGluY2x1ZGUgc3ByaXRlLXdpZHRoKCRpY29uLWhvbWUpO1xufVxuXG4uaWNvbi1lbWFpbCB7XG4gIEBpbmNsdWRlIHNwcml0ZSgkaWNvbi1lbWFpbCk7XG59XG5cbkV4YW1wbGUgdXNhZ2UgaW4gSFRNTDpcblxuYGRpc3BsYXk6IGJsb2NrYCBzcHJpdGU6XG48ZGl2IGNsYXNzPVwiaWNvbi1ob21lXCI+PC9kaXY+XG5cblRvIGNoYW5nZSBgZGlzcGxheWAgKGUuZy4gYGRpc3BsYXk6IGlubGluZS1ibG9jaztgKSwgd2Ugc3VnZ2VzdCB1c2luZyBhIGNvbW1vbiBDU1MgY2xhc3M6XG5cbi8vIENTU1xuLmljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8vIEhUTUxcbjxpIGNsYXNzPVwiaWNvbiBpY29uLWhvbWVcIj48L2k+XG4qL1xuQG1peGluIHNwcml0ZS13aWR0aCgkc3ByaXRlKSB7XG4gIHdpZHRoOiBudGgoJHNwcml0ZSwgNSk7XG59XG5cbkBtaXhpbiBzcHJpdGUtaGVpZ2h0KCRzcHJpdGUpIHtcbiAgaGVpZ2h0OiBudGgoJHNwcml0ZSwgNik7XG59XG5cbkBtaXhpbiBzcHJpdGUtcG9zaXRpb24oJHNwcml0ZSkge1xuICAkc3ByaXRlLW9mZnNldC14OiBudGgoJHNwcml0ZSwgMyk7XG4gICRzcHJpdGUtb2Zmc2V0LXk6IG50aCgkc3ByaXRlLCA0KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogJHNwcml0ZS1vZmZzZXQteCAgJHNwcml0ZS1vZmZzZXQteTtcbn1cblxuQG1peGluIHNwcml0ZS1pbWFnZSgkc3ByaXRlKSB7XG4gICRzcHJpdGUtaW1hZ2U6IG50aCgkc3ByaXRlLCA5KTtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCN7JHNwcml0ZS1pbWFnZX0pO1xufVxuXG5AbWl4aW4gc3ByaXRlKCRzcHJpdGUpIHtcbiAgQGluY2x1ZGUgc3ByaXRlLWltYWdlKCRzcHJpdGUpO1xuICBAaW5jbHVkZSBzcHJpdGUtcG9zaXRpb24oJHNwcml0ZSk7XG4gIEBpbmNsdWRlIHNwcml0ZS13aWR0aCgkc3ByaXRlKTtcbiAgQGluY2x1ZGUgc3ByaXRlLWhlaWdodCgkc3ByaXRlKTtcbn1cblxuLypcblRoZSBgcmV0aW5hLXNwcml0ZWAgbWl4aW4gc2V0cyB1cCBydWxlcyBhbmQgYSBtZWRpYSBxdWVyeSBmb3IgYSBzcHJpdGUvcmV0aW5hIHNwcml0ZS5cbiAgSXQgc2hvdWxkIGJlIHVzZWQgd2l0aCBhIFwicmV0aW5hIGdyb3VwXCIgdmFyaWFibGUuXG5cblRoZSBtZWRpYSBxdWVyeSBpcyBmcm9tIENTUyBUcmlja3M6IGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL3JldGluYS1kaXNwbGF5LW1lZGlhLXF1ZXJ5L1xuXG4kaWNvbi1ob21lLWdyb3VwOiAoJ2ljb24taG9tZScsICRpY29uLWhvbWUsICRpY29uLWhvbWUtMngsICk7XG5cbi5pY29uLWhvbWUge1xuICBAaW5jbHVkZSByZXRpbmEtc3ByaXRlKCRpY29uLWhvbWUtZ3JvdXApO1xufVxuKi9cbkBtaXhpbiBzcHJpdGUtYmFja2dyb3VuZC1zaXplKCRzcHJpdGUpIHtcbiAgJHNwcml0ZS10b3RhbC13aWR0aDogbnRoKCRzcHJpdGUsIDcpO1xuICAkc3ByaXRlLXRvdGFsLWhlaWdodDogbnRoKCRzcHJpdGUsIDgpO1xuICBiYWNrZ3JvdW5kLXNpemU6ICRzcHJpdGUtdG90YWwtd2lkdGggJHNwcml0ZS10b3RhbC1oZWlnaHQ7XG59XG5cbkBtaXhpbiByZXRpbmEtc3ByaXRlKCRyZXRpbmEtZ3JvdXApIHtcbiAgJG5vcm1hbC1zcHJpdGU6IG50aCgkcmV0aW5hLWdyb3VwLCAyKTtcbiAgJHJldGluYS1zcHJpdGU6IG50aCgkcmV0aW5hLWdyb3VwLCAzKTtcbiAgQGluY2x1ZGUgc3ByaXRlKCRub3JtYWwtc3ByaXRlKTtcblxuICBAbWVkaWEgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksXG4gICAgICAgICAobWluLXJlc29sdXRpb246IDE5MmRwaSkge1xuICAgIEBpbmNsdWRlIHNwcml0ZS1pbWFnZSgkcmV0aW5hLXNwcml0ZSk7XG4gICAgQGluY2x1ZGUgc3ByaXRlLWJhY2tncm91bmQtc2l6ZSgkbm9ybWFsLXNwcml0ZSk7XG4gIH1cbn1cblxuLypcblRoZSBgc3ByaXRlc2AgbWl4aW4gZ2VuZXJhdGVzIGlkZW50aWNhbCBvdXRwdXQgdG8gdGhlIENTUyB0ZW1wbGF0ZVxuICBidXQgY2FuIGJlIG92ZXJyaWRkZW4gaW5zaWRlIG9mIFNDU1NcblxuQGluY2x1ZGUgc3ByaXRlcygkc3ByaXRlc2hlZXQtc3ByaXRlcyk7XG4qL1xuQG1peGluIHNwcml0ZXMoJHNwcml0ZXMpIHtcbiAgQGVhY2ggJHNwcml0ZSBpbiAkc3ByaXRlcyB7XG4gICAgJHNwcml0ZS1uYW1lOiBudGgoJHNwcml0ZSwgMTApO1xuICAgIC4jeyRzcHJpdGUtbmFtZX0ge1xuICAgICAgQGluY2x1ZGUgc3ByaXRlKCRzcHJpdGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKlxuVGhlIGByZXRpbmEtc3ByaXRlc2AgbWl4aW4gZ2VuZXJhdGVzIGEgQ1NTIHJ1bGUgYW5kIG1lZGlhIHF1ZXJ5IGZvciByZXRpbmEgZ3JvdXBzXG4gIFRoaXMgeWllbGRzIHRoZSBzYW1lIG91dHB1dCBhcyBDU1MgcmV0aW5hIHRlbXBsYXRlIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBpbiBTQ1NTXG5cbkBpbmNsdWRlIHJldGluYS1zcHJpdGVzKCRyZXRpbmEtZ3JvdXBzKTtcbiovXG5AbWl4aW4gcmV0aW5hLXNwcml0ZXMoJHJldGluYS1ncm91cHMpIHtcbiAgQGVhY2ggJHJldGluYS1ncm91cCBpbiAkcmV0aW5hLWdyb3VwcyB7XG4gICAgJHNwcml0ZS1uYW1lOiBudGgoJHJldGluYS1ncm91cCwgMSk7XG4gICAgLiN7JHNwcml0ZS1uYW1lfSB7XG4gICAgICBAaW5jbHVkZSByZXRpbmEtc3ByaXRlKCRyZXRpbmEtZ3JvdXApO1xuICAgIH1cbiAgfVxufVxuIiwiQGltcG9ydCBcInNwcml0ZS1pY28tZmlyc3RcIjtcclxuKiB7XHJcbiAgY29sb3I6IGJsdWU7XHJcbn1cclxuQG1peGluIGNsZWFyZml4KCkge1xyXG4gICY6YmVmb3JlLFxyXG4gICY6YWZ0ZXIge1xyXG4gICAgY29udGVudDogXCIgXCI7XHJcbiAgICBkaXNwbGF5OiB0YWJsZTtcclxuICB9XHJcblxyXG4gICY6YWZ0ZXIge1xyXG4gICAgY2xlYXI6IGJvdGg7XHJcbiAgfVxyXG59XHJcblxyXG4uY2xhc3Mge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgQGluY2x1ZGUgY2xlYXJmaXgoKTtcclxufVxyXG5cclxuLmJhc2Uge1xyXG4gIGNvbG9yOiByZWQ7XHJcbn1cclxuXHJcbi8vIHBsYWNlaG9sZGVyXHJcblxyXG4lYmFzZSB7XHJcblxyXG4gIHBhZGRpbmc6IDEycHhcclxufVxyXG5cclxuLmZvbyB7XHJcbiAgQGV4dGVuZCAuYmFzZTtcclxufVxyXG5cclxuLmJhciB7XHJcbiAgQGV4dGVuZCAlYmFzZTtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
